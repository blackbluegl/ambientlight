#include <stdint.h>
#include <stddef.h>

#include "Pn9.h"
#include "Util.h"

/* First 255 bytes of PN9 sequence used for data whitening by the CC1101
 * chip. The RF22 chip is documented to support the same data whitening
 * algorithm, but in practice seems to use a different sequence.
 *
 * Data was generated using the following python snippet:
 *
import itertools
def pn9(state):
    while True:
        yield hex(state & 0xff)
        # The pn9 generator is clocked 8 times while shifting in the
        # next data byte
        for i in range(8):
            state = (state >> 1) + (((state & 1) ^ (state >> 5) & 1) << 8)
print(list(itertools.islice(pn9(0x1ff), 255)))
 */
static const uint8_t  pn9_table[] = {
  0xff, 0xe1, 0x1d, 0x9a, 0xed, 0x85, 0x33, 0x24,
  0xea, 0x7a, 0xd2, 0x39, 0x70, 0x97, 0x57, 0x0a,
  0x54, 0x7d, 0x2d, 0xd8, 0x6d, 0x0d, 0xba, 0x8f,
  0x67, 0x59, 0xc7, 0xa2, 0xbf, 0x34, 0xca, 0x18,
  0x30, 0x53, 0x93, 0xdf, 0x92, 0xec, 0xa7, 0x15,
  0x8a, 0xdc, 0xf4, 0x86, 0x55, 0x4e, 0x18, 0x21,
  0x40, 0xc4, /* 0xc4, 0xd5, 0xc6, 0x91, 0x8a, 0xcd,
  0xe7, 0xd1, 0x4e, 0x09, 0x32, 0x17, 0xdf, 0x83,
  0xff, 0xf0, 0x0e, 0xcd, 0xf6, 0xc2, 0x19, 0x12,
  0x75, 0x3d, 0xe9, 0x1c, 0xb8, 0xcb, 0x2b, 0x05,
  0xaa, 0xbe, 0x16, 0xec, 0xb6, 0x06, 0xdd, 0xc7,
  0xb3, 0xac, 0x63, 0xd1, 0x5f, 0x1a, 0x65, 0x0c,
  0x98, 0xa9, 0xc9, 0x6f, 0x49, 0xf6, 0xd3, 0x0a,
  0x45, 0x6e, 0x7a, 0xc3, 0x2a, 0x27, 0x8c, 0x10,
  0x20, 0x62, 0xe2, 0x6a, 0xe3, 0x48, 0xc5, 0xe6,
  0xf3, 0x68, 0xa7, 0x04, 0x99, 0x8b, 0xef, 0xc1,
  0x7f, 0x78, 0x87, 0x66, 0x7b, 0xe1, 0x0c, 0x89,
  0xba, 0x9e, 0x74, 0x0e, 0xdc, 0xe5, 0x95, 0x02,
  0x55, 0x5f, 0x0b, 0x76, 0x5b, 0x83, 0xee, 0xe3,
  0x59, 0xd6, 0xb1, 0xe8, 0x2f, 0x8d, 0x32, 0x06,
  0xcc, 0xd4, 0xe4, 0xb7, 0x24, 0xfb, 0x69, 0x85,
  0x22, 0x37, 0xbd, 0x61, 0x95, 0x13, 0x46, 0x08,
  0x10, 0x31, 0x71, 0xb5, 0x71, 0xa4, 0x62, 0xf3,
  0x79, 0xb4, 0x53, 0x82, 0xcc, 0xc5, 0xf7, 0xe0,
  0x3f, 0xbc, 0x43, 0xb3, 0xbd, 0x70, 0x86, 0x44,
  0x5d, 0x4f, 0x3a, 0x07, 0xee, 0xf2, 0x4a, 0x81,
  0xaa, 0xaf, 0x05, 0xbb, 0xad, 0x41, 0xf7, 0xf1,
  0x2c, 0xeb, 0x58, 0xf4, 0x97, 0x46, 0x19, 0x03,
  0x66, 0x6a, 0xf2, 0x5b, 0x92, 0xfd, 0xb4, 0x42,
  0x91, 0x9b, 0xde, 0xb0, 0xca, 0x09, 0x23, 0x04,
  0x88, 0x98, 0xb8, 0xda, 0x38, 0x52, 0xb1, 0xf9,
  0x3c, 0xda, 0x29, 0x41, 0xe6, 0xe2, 0x7b
  */
};

static_assert(lengthof(pn9_table) == PN9_LEN, "Not exactly PN9_LEN pn9 bytes defined");

int xor_pn9(uint8_t *buf, size_t len) {
  if (len > sizeof(pn9_table))
    return -1;

  for (unsigned int i = 0; i < len; ++i)
    buf[i] ^= pn9_table[i];

  return 0;
}

/* vim: set sw=2 sts=2 expandtab filetype=cpp: */
