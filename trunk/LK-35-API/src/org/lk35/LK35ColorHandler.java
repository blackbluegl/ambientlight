/*  Copyright 2013 Florian Bornkessel

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */

package org.lk35;

import java.io.IOException;
import java.util.List;


/**
 * <h1>Introduction</h1> Interface to control the LK35 wlan controller.
 * 
 * <h2>About that API</h2> The controller is able to handle 140 levels for each
 * channel. You may set any rgb color - the API adapts the color values and
 * sends them to the controller. Up to 40 API calls per second should be
 * possible if you change a complete color.
 * 
 * <h2>Zone - Handling</h2> The controller is able to handle 8 different zones
 * if you have further controllers attached as clients. Remark: Initially the
 * controller will be delivered for zone 0. This API is able to handle that.
 * Just leave the zones array empty. But some remotes may communicate only with
 * zones between 1 and 8.
 * 
 * <h2>Howto learn a zone</h2> Press the "learn" button on the controller. Open
 * a connection, send an {@link #resetColor(List)} with only that zonenumber in
 * the array that should be applied. The controller is ready.
 * 
 * 
 * @author Florian Bornkessel
 * @version 0.9.0
 * 
 * 
 */
public interface LK35ColorHandler {

	/**
	 * set RGB for the given zones.
	 * 
	 * @param zones
	 *            array[int], each value between 0 and 8
	 * @param r
	 *            int, value between 0 and 255
	 * @param g
	 *            int, value between 0 and 255
	 * @param b
	 *            int, value between 0 and 255
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public void setRGB(List<Integer> zones, int r, int g, int b) throws IOException, InterruptedException;


	/**
	 * set Color as HSV Value for given zones.
	 * 
	 * @param zones
	 * @param h
	 *            int , value between 0 and 255 array[int], each value between 1
	 *            and 8
	 * @param s
	 *            int, value between 0 and 255
	 * @param v
	 *            int, value between 0 and 255
	 * @throws InterruptedException
	 * @throws IOException
	 */
	public void setHSV(List<Integer> zones, int h, int s, int v) throws IOException, InterruptedException;


	/**
	 * set RGB for given zones. The API adapts the color value and uses all 4
	 * channels of the controller. Therefore as much white as possible will
	 * used. Additional color values will be generated by the rgb channels.
	 * 
	 * @param zones
	 *            array[int], each value between 0 and 8
	 * @param r
	 *            int, value between 0 and 255
	 * @param g
	 *            int, value between 0 and 255
	 * @param b
	 *            int, value between 0 and 255
	 * @param maxBrightness
	 *            boolean, if set to true and the brightness of your rgb color
	 *            is greater than 127 the influence of rgb decreases and your
	 *            color result will turn more or less to white at the end. But
	 *            therefore you have a full bright light.
	 * @throws InterruptedException
	 * @throws IOException
	 */
	public void setRGBWithWhiteChannel(List<Integer> zones, int r, int g, int b, boolean maxBrightness) throws IOException,
	InterruptedException;


	/**
	 * set Color as HSV Value for given zones. The API adapts the color value
	 * and uses all 4 channels of the controller. Therefore as much white as
	 * possible will used. Additional color values will be generated by the rgb
	 * channels.
	 * 
	 * @param zones
	 *            array[int], each value between 0 and 8
	 * @param h
	 *            int , value between 0 and 255 array[int], each value between 1
	 *            and 8
	 * @param s
	 *            int, value between 0 and 255
	 * @param v
	 *            int, value between 0 and 255
	 * @param maxBrightness
	 *            boolean, if set to true and the brightness of your rgb color
	 *            is greater than 127 the influence of rgb decreases and your
	 *            color result will turn more or less to white at the end. But
	 *            therefore you have a full bright light.
	 * @throws InterruptedException
	 * @throws IOException
	 */
	public void setHSVwithWihiteChannel(List<Integer> zones, int h, int s, int v, boolean maxBrightness) throws IOException,
	InterruptedException;


	/**
	 * set red channel for given zones.
	 * 
	 * @param zones
	 *            array[int], each value between 0 and 8
	 * @param value
	 *            int, value between 0 and 255
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public void setR(List<Integer> zones, int value) throws IOException, InterruptedException;


	/**
	 * set green channel for given zones.
	 * 
	 * @param zones
	 *            array[int], each value between 0 and 8
	 * @param value
	 *            int, value between 0 and 255
	 * @throws InterruptedException
	 * @throws IOException
	 */
	public void setG(List<Integer> zones, int value) throws InterruptedException, IOException;


	/**
	 * set blue channel for given zones.
	 * 
	 * @param zones
	 *            array[int], each value between 0 and 8
	 * @param value
	 *            int, value between 0 and 255
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public void setB(List<Integer> zones, int value) throws InterruptedException, IOException;


	/**
	 * set white channel
	 * 
	 * @param zones
	 *            array[int], each value between 0 and 8
	 * @param value
	 *            int, value between 0 and 255
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public void setW(List<Integer> zones, int value) throws InterruptedException, IOException;


	/**
	 * reset all channels to black for the given zone. Brightness will be reset
	 * to highest value.
	 * 
	 * @param zones
	 *            int, value between 0 and 8
	 * @throws InterruptedException
	 * @throws IOException
	 */
	public void resetColor(List<Integer> zones) throws IOException, InterruptedException;


	/**
	 * toggles powerstate for all zones between black and the last remembered
	 * value. Remember that the controller will fade the colors in hardware.
	 * This will take up to 3 seconds. You may send commands during that fade
	 * but they will be performed afterwards.
	 * 
	 * @param powerState
	 *            if set to false, the color is faded to black. if set to true,
	 *            the last state will be restored.
	 * @throws IOException
	 */
	public void togglePower(boolean powerState) throws IOException;


	/**
	 * toggles powerstate for given zones between black and the last remembered
	 * value.
	 * 
	 * @see #togglePower(boolean)
	 * @param zones
	 *            value int, value between 0 and 8
	 * @param powerState
	 *            if set to false, the color is faded to black. if set to true,
	 *            the last state will be restored.
	 */
	public void togglePower(List<Integer> zones, boolean powerState);


	/**
	 * set brightness. Provide a value between 0 and 7. higher values will be
	 * treated as 7.
	 * 
	 * @param zones
	 *            value int, value between 0 and 8
	 * @param value
	 *            int, value between 0 and 7
	 * @throws InterruptedException
	 * @throws IOException
	 */
	public void setBrightness(List<Integer> zones, int value) throws InterruptedException, IOException;


	/**
	 * toggles color fading effect of the controller on and off. This could be
	 * useful if your client has no capability to generate animations. As there
	 * is no feedback from controller, it is not possible to determine
	 * programmatically if the effect is running or not.
	 * 
	 * @param zones
	 *            value int, value between 0 and 8
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public void toggleColorFader(List<Integer> zones) throws IOException, InterruptedException;


	/**
	 * speed up the color fade effect for given zones.
	 * 
	 * @see #toggleColorFader(List)
	 * @param zones
	 *            value int, value between 0 and 8
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public void speedUpColorFader(List<Integer> zones) throws IOException, InterruptedException;


	/**
	 * speed down the color fade effect for given zones.
	 * 
	 * @see #toggleColorFader(List)
	 * @param zones
	 *            value int, value between 0 and 8
	 * @throws IOException
	 * @throws InterruptedException
	 */
	public void speedDownColorFader(List<Integer> zones) throws IOException, InterruptedException;
}
